APRANK v1.0

DESCRIPTION
    This program takes a Fasta file as input and analyzes several aspects for each protein which are then translated into a score that is related with 
    the probability of that protein being antigenic

AUTHORS
    APRANK v1.0 by Alejandro Ricci
    Based on Pepranker v4.0 by Mauricio Brunner, Diego Ramoa, Santiago Carmona and Fernán Agüero

DEPENDENCES
    Needs Perl (Config::General, Bio::SeqIO::fasta, Parallel::ForkManager), R (data.table, pROC, ggplot2), BepiPred 1.0, Iupred 1.0, 
    netMHCIIpan 2.0, NetOGlyc 3.1d, NetSurfp 1.0, Paircoil2, PredGPI 1.4.3, SignalP 4.0, TMHMM 2.0c and Xstream 1.71

RUNNING APRANK VIA R
    Edit "R_pipeline.R" using RStudio or other text editor. Adjust the config variables as necessary.

    Either run the code in RStudio or run the following command in the APRANK folder
        Rscript --vanilla R_pipeline.R

RUNNING APRANK VIA PERL
    Edit the "Perl Pipeline Config.txt" file using a text editor. Adjust the config variables as necessary.

    Run the "pipeline.pl" from console, passing the input file
        perl pipeline.pl test/CHO.fsa

    Remember that if you are using the Perl pipeline you can also change settings directly from console, such as
        perl pipeline.pl test/CHO.fsa -l 16 -o 12

PERL COMMAND LINE PARAMETERS
    pipeline.pl fasta_file [-hf host_fasta_file] [-cf coendemic_fasta_file] [-h|help] [-l peptide_length] [-o peptide_overlap]
        [-kl kmer_length] [-mpr protein_model_file] [-mpe peptide_model_file] [-of output_folder] [-bp use_BepiPred]
        [-ip use_IsoelectricPoint] [-ir use_Iupred] [-mw use_MolecularWeight] [-mhc use_NetMHCIIpan] [-no use_NetOglyc] [-ns use_NetSurfp]
        [-p2 use_Paircoil2] [-gpi use_PredGPI] [-ss use_SelfSimilarity] [-sp use_SignalP] [-tm use_TMHMM] [-xs use_Xstream]
        [-cem Coendemicity_max_matches_allowed] [-cep Coendemicity_penalty_per_match] [-mhcl NetMHCIIpan_binding_peptide_length]
        [-mhca NetMHCIIpan_alleles] [-p2l Paircoil2_fragment_length] [-p2t Paircoil2_threshold]
        [-spg SignalP_organism_group] [-xsmp Xstream_min_period] [-xsmc Xstream_min_copy_number] [-xsme Xstream_max_consensus_error]
        [-res temp_subfolder_for_resume]

    It's recomended to change the arguments from "Perl Pipeline Config.txt"

    fasta_file                                 => A file with protein sequences in FASTA format.
    [-hf host_fasta_file]                      => A file with protein sequences from the host in FASTA format.
    [-cf coendemic_fasta_file]                 => A file with protein sequences in FASTA format from an organism that is coendemic to the one 
                                                  studied.
    [-h|help]                                  => Information about how to use the program.
    [-l peptide_length]                        => Length of the peptides to analyze.
    [-o peptide_overlap]                       => Overlap of said peptides.
    [-kl kmer_length]                          => The length of the kmers used when comparing to the host or coendemic genome or when using 
                                                  Self Similarity (integer between 4 and 50).
    [-mpr protein_model_file]                  => File with the protein model used to calculate the final score.
    [-mpe peptide_model_file]                  => File with the peptide model used to calculate the final score.
    [-of output_folder]                        => The output folder. If it isn't given it's constructed from the name of the input fasta file.
    [-bp use_BepiPred]                         => If use or not BepiPred, which is used to predict B cell epitopes. (1 = Yes, 0 = No)
    [-ip use_IsoelectricPoint]                 => If use or not IsoelectricPoint, which is used to predict the Isoelectric Point of a protein. 
                                                  (1 = Yes, 0 = No)
    [-ir use_Iupred]                           => If use or not Iupred, which is used to detect intrinsically disordered proteins. (1 = Yes, 0 
                                                  = No)
    [-mw use_MolecularWeight]                  => If use or not CrossReactivity, which is used to predict the Molecular Weight of a protein. (1 
                                                  = Yes, 0 = No)
    [-mhc use_NetMHCIIpan]                     => If use or not NetMHCIIpan, which is used to predict binding of peptides to MHC class II 
                                                  molecules. (1 = Yes, 0 = No)
    [-no use_NetOglyc]                         => If use or not NetOglyc, which is used to detect possible O-glycosylation sites. (1 = Yes, 0 = 
                                                  No)
    [-ns use_NetSurfp]                         => If use or not NetSurfp, which is used to predict relative surface accessibility, and 
                                                  probabilities for both alpha helix and beta strand. (1 = Yes, 0 = No)
    [-p2 use_Paircoil2]                        => If use or not Paircoil2, which is used to predict the parallel coiled coil fold of a protein. 
                                                  (1 = Yes, 0 = No)
    [-gpi use_PredGPI]                         => If use or not PredGPI, which is used to predict which proteins are GPI-anchored proteins. (1 
                                                  = Yes, 0 = No)
    [-ss use_SelfSimilarity]                   => If use or not SelfSimilarity, which is used to detect high similarity sequences inside the 
                                                  same proteome. (1 = Yes, 0 = No)
    [-sp use_SignalP]                          => If use or not SignalP, which is used to detect the presence and location of signal peptide 
                                                  cleavage sites. (1 = Yes, 0 = No)
    [-tm use_TMHMM]                            => If use or not TMHMM, which is used to predict if the protein has transmembrane helices. (1 = 
                                                  Yes, 0 = No)
    [-xs use_Xstream]                          => If use or not Xstream, which is used to detect tandem repeats in proteins. (1 = Yes, 0 = No)
    [-cem Coendemicity_max_matches_allowed]    => The maximum number of times a kmer present in the genome of interest can appear in the genome 
                                                  of the coendemic organism before applying a penalty to the peptides containing said kmer.
    [-cep Coendemicity_penalty_per_match]      => The penalty to apply to the scores of the peptides containing more that the allowed number of 
                                                  kmer matches with the genome of the coendemic organism. A penalty of 1 means that with 1 
                                                  match above the allowed the peptide score will go down to 0, while a penalty of 0.5 will make 
                                                  it go to half it's original value (and will go to 0 if the peptide has two matches).
    [-mhcl NetMHCIIpan_binding_peptide_length] => The length of the fragment used when analyzing with NetMHCIIpan (integer between 9 and 30).
    [-mhca NetMHCIIpan_alleles]                => The names of the MHC class II alleles to consider when analyzing (separated by spaces).
    [-p2l Paircoil2_fragment_length]           => The length of each fragment Paircoil2 will analyze (has to be >= 28).
    [-p2t Paircoil2_threshold]                 => The minimum probability of being in a coiled coil that the data has to have to be considered 
                                                  to be in coiled coil (between 0 and 1).
    [-spg SignalP_organism_group]              => The organism group of the genome to analyze. It can be: "euk", "gram+" or "gram-".
    [-xsmp Xstream_min_period]                 => The minimum period that a tandem repeat has to have to be recorded when using Xstream.
    [-xsmc Xstream_min_copy_number]            => The minimum copy number that a tandem repeat has to have to be recorded when using Xstream.
    [-xsme Xstream_max_consensus_error]        => The maximum consensus error that a tandem repeat has to have to be recorded when using 
                                                  Xstream.
    [-res temp_subfolder_for_resume]           => Used only when trying to resume a halted run. The path to the specific temp folder 
                                                  inside /tmp (the name should be similar to FASTAname-date-hour).

RESUMING A HALTED RUN

  If for some reason the run was halted, you can resume it by using the -res command. For this to work you have to pass the program the
  full path to the temp folder, which by default is found inside the /tmp folder and has a name such as "FASTAname_YYYYMMDD-hhmmss".

READING THE OUTPUTS
	By default, APRANK will save the outputs in the /outputs folder, inside a new folder with the FastaName_Date format.

	APRANK will produce two set of scores, one for the proteins and one for the peptides. All scores go from 0 (predicted to be non-antigenic) to 
	1 (predicted to be antigenic).

	The data for the protein predictions can be found inside the score_output_per_protein.tsv file, and its columns are:

	- id: an internal id assigned ID APRANK to deal with possible repeated proteins IDs
	- original_id: the original ID found in the FASTA for this protein
	- protein_score: the antigenicity score predicted by APRANK
	
	The data for the peptide predictions can be found inside the score_output_per_peptide.tsv file, and its columns are:

	- id: the corresponding protein ID
	- original_id: the corresponding protein original ID
	- start: the position in the protein of the peptide's first amino acid
	- end: the position in the protein of the peptide's last amino acid
	- peptide: the peptide's sequence
	- peptide_score: the antigenicity score predicted by APRANK
	- protein_score: the corresponding protein antigenicity score
	- combined_score: the combined antigenicity score, including info of both protein and peptide scores
	
	Also, if calculating the Coendemicity, an extra set of scores will appear with a _wCoendemicPenalty suffix in the name.

	APRANK will also save the processed data from the predictors inside the /predictors_outputs folder just in case you need it.